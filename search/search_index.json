{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Articles","text":""},{"location":"about/","title":"About Me","text":"<p>I'm a system administrator in Iowa. Currently working on a number of Microsoft and Linux based technologies. I also do a bit with home automation.</p> <p>This blog is purely something I do for my own amusement so I don't always post regularly.</p> <p>There was a previous version of this blog, which I have archived here. I thought about trying to migrate the content, but but decided against it. I'll keep the repo in an archived state for posterity.</p>"},{"location":"2023/11/03/cleanup-winsxs/","title":"Cleanup WinSXS","text":"<p>From: https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/clean-up-the-winsxs-folder?view=windows-11</p>"},{"location":"2023/11/03/cleanup-winsxs/#analyze-component-store","title":"Analyze component store","text":"<pre><code>dism /Online /Cleanup-Image /AnalyzeComponentStore\n</code></pre>"},{"location":"2023/11/03/cleanup-winsxs/#remove-previous-versions-of-updated-components","title":"Remove previous versions of updated components","text":"<pre><code>Dism.exe /online /Cleanup-Image /StartComponentCleanup\n</code></pre>"},{"location":"2023/11/03/cleanup-winsxs/#remove-all-superseded-versions-of-components","title":"Remove all superseded versions of components","text":"<pre><code>Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase\n</code></pre>"},{"location":"2023/11/04/configure-windows-time/","title":"Configure Windows Time","text":""},{"location":"2023/11/04/configure-windows-time/#ad-members","title":"AD members","text":"<p>This will reset a domain member to use NT5DS to set the time. This should be the default for \"most\" domain environments <pre><code>net stop w32time\nw32tm /unregister\nw32tm /register\nnet start w32time\nw32tm /config /syncfromflags:DOMHIER /update\nnet stop w32time\nnet start w32time\nw32tm /resync /rediscover /nowait\n</code></pre></p>"},{"location":"2023/11/04/configure-windows-time/#ad-pdc","title":"AD PDC","text":"<p>In most setups the PDC should be configured to sync with an external time source. Other domain controllers should sync to it. The below command simply sets the PDC to sync with the NIST time source. <pre><code>net stop w32time\nw32tm /unregister\nw32tm /register\nnet start w32time\nw32tm.exe /config /manualpeerlist:\"time.nist.gov,0x8\" /syncfromflags:manual /reliable:YES /update\nnet stop w32time\nnet start w32time\nw32tm /resync /nowait\n</code></pre></p>"},{"location":"2023/11/04/configure-windows-time/#set-timezone","title":"Set timezone","text":"<pre><code>tzutil /s \"Central Standard Time\"\n</code></pre>"},{"location":"2023/11/04/configure-windows-time/#troubleshooting","title":"Troubleshooting","text":"<pre><code>w32tm /resync /rediscover\nw32tm /query /status /verbose\nw32tm /query /configuration\n</code></pre>"},{"location":"2023/11/04/configure-windows-time/#aws-workspace-default","title":"AWS Workspace Default","text":"<p>Below is the new time settings for AWS machines. This command is if you want to revert to the default setting for AWS. <pre><code>w32tm /config /manualpeerlist:\"169.254.169.123,0x9 time.windows.com,0x8\" /syncfromflags:manual /update\n</code></pre></p>"},{"location":"2023/11/06/force-ad-replication/","title":"Force AD Replication","text":"<p>The below script will get all domain controllers in the current domain and then run a repadmin /syncall on all of them.</p> <pre><code>(Get-ADDomainController -Filter *).Name | Foreach-Object {\n    repadmin /syncall $_ (Get-ADDomain).DistinguishedName /e /A | Out-Null\n}\n</code></pre>"},{"location":"2023/11/07/ms-dns-logging/","title":"MS DNS Logging","text":"<p>For auditing we have to setup our DNS servers to audit various events and queries. </p>"},{"location":"2023/11/07/ms-dns-logging/#set-logging-settings","title":"Set logging settings","text":"<p>The below command can be run on one of the dns servers. It will enable logging to a file at c:\\dnslogs and enable log rollover. <pre><code>$setupFolder = \"c:\\dnslogs\"\nNew-Item -Path $setupFolder -type directory -Force\nSet-DnsServerDiagnostics `\n-SaveLogsToPersistentStorage:$False `\n-Queries:$True `\n-Answers:$True `\n-Notifications:$False `\n-Update:$False `\n-QuestionTransactions:$True `\n-UnmatchedResponse:$True `\n-SendPackets:$True `\n-ReceivePackets:$True `\n-TcpPackets:$True `\n-UdpPackets:$True `\n-FullPackets:$False `\n-EventLogLevel 7 `\n-UseSystemEventLog:$False `\n-EnableLoggingToFile:$True `\n-EnableLogFileRollover:$True `\n-LogFilePath C:\\dnslogs\\dns.log `\n-MaxMBFileSize 500000000 `\n-WriteThrough:$False `\n-EnableLoggingForLocalLookupEvent:$True `\n-EnableLoggingForPluginDllEvent:$True `\n-EnableLoggingForRecursiveLookupEvent:$True `\n-EnableLoggingForRemoteServerEvent:$True `\n-EnableLoggingForServerStartStopEvent:$True `\n-EnableLoggingForTombstoneEvent:$True `\n-EnableLoggingForZoneDataWriteEvent:$True `\n-EnableLoggingForZoneLoadingEvent:$True\n</code></pre></p>"},{"location":"2023/11/07/ms-dns-logging/#replicate-logging-settings","title":"Replicate logging settings","text":"<p>Change the DC name to match the one that you setup logging on. The command will get all the settings from that server and then copy them to the remaining DCs in the domain. <pre><code>$settings = Get-DnsServerDiagnostics -ComputerName DC01\n\n$dcs = (Get-ADDomainController -Filter *).HostName\n\nforeach ($dc in $dcs) {\n    # create dnslogs folder\n    Invoke-Command -ComputerName $dc -ScriptBlock { \n        $setupFolder = \"c:\\dnslogs\"\n        New-Item -Path $setupFolder -type directory -Force\n    }\n\n    $settings | Set-DnsServerDiagnostics -ComputerName $dc\n}\n</code></pre></p>"},{"location":"2023/11/08/btop-is-best-top/","title":"btop is Best Top","text":"<p>Usually I use htop, or in the absense of that top, to do basic performance monitoring at a glance. However last week I saw someone post on lemmy about btop. And as the title says, btop is best top (IMO).</p> <p>https://github.com/aristocratos/btop</p> <p></p> <p>btop has most if not all the features of htop with some additions including, network activity and basic disk IO.</p> <p>I was able to install it using the package manager on dietpi and Armbian. For distros though you might need to manually download and run the install script, or just compile from source.</p> <p>I tried the installer script on Almalinux and CentOS 7 and it was pretty straight forward.</p> <p>I'd never seen a tbz file before, but tar can handle them.</p> <pre><code>wget https://github.com/aristocratos/btop/releases/download/v1.2.13/btop-x86_64-linux-musl.tbz\ntar -xjf btop-x86_64-linux-musl.tbz\ncd btop\n./install.sh\n</code></pre>"},{"location":"2023/11/09/greenshot-intune-deployment/","title":"Greenshot Intune Deployment","text":"<p>Greenshot is a very nice program. However there is one thing that REALLY annoys me about it. The hard coded browser poppup after install. Deploying Greenshot via Intune is not the most straight foward thing if you want to customize the install. Plus there is having to kill greenshot running under the deploy account (usually system) and also starting greenshot under the current logged on user after install.</p> <p>For this I used this intune winget template. It consists of your usual detection, install, and uninstall scripts. Below I'll be going over the install script.</p> <pre><code>Param\n    (\n    [parameter(Mandatory=$false)]\n    [String[]]\n    $param\n    )\n\n\n#Attempt to stop greenshot if not kill it with fire\nif (Test-Path \"$ENV:ProgramFiles\\Greenshot\\Greenshot.exe\") {\n    Start-Process -FilePath \"$ENV:ProgramFiles\\Greenshot\\Greenshot.exe /exit\"\n} else {}\nStart-Sleep -Seconds 10\nStop-Process -Name greenshot -Force -Confirm:$false -ErrorAction SilentlyContinue\n\n\n#create custom installer settings and save to temp location.\n$custominf = @'\n[Setup]\nLang=en\nGroup=Greenshot\nNoIcons=0\nSetupType=custom\nComponents=greenshot,plugins\\office,plugins\\ocr,plugins\\externalcommand\nTasks=startup\n'@\nNew-Item C:\\temp\\custom.inf -Force\nSet-Content C:\\temp\\custom.inf $custominf\n\n\n# do the actual install of greenshot using winget and the custom settings we saved in the last step\n$ProgramName = \"Greenshot.Greenshot\"\n$Path_local = \"$Env:Programfiles\\_MEM\"\nStart-Transcript -Path \"$Path_local\\Log\\$ProgramName-install.log\" -Force -Append\n\n# resolve winget_exe\n$winget_exe = Resolve-Path \"C:\\Program Files\\WindowsApps\\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\\winget.exe\"\nif ($winget_exe.count -gt 1){\n        $winget_exe = $winget_exe[-1].Path\n}\n\nif (!$winget_exe){Write-Error \"Winget not installed\"}\n\n&amp; $winget_exe install --exact --id $ProgramName --silent --accept-package-agreements --accept-source-agreements --scope=machine $param --override \"/LOADINF=C:\\temp\\custom.inf /NORESTART /VERYSILENT\"\n\n\n#create a fixted settings file and copy it to the greenshot install directory. These settings are enforced in the app.\n$fixedsettings = @'\n[Core]\n; The language in IETF format (e.g. en-US)\nLanguage=en-US\n; Comma separated list of Plugins which are allowed. If something in the list, than every plugin not in the list will not be loaded!\nIncludePlugins=External command Plugin,OCR Plugin,Office Plugin\n; Comma separated list of Plugins which are NOT allowed.\nExcludePlugins=\n; Comma separated list of destinations which should be disabled.\nExcludeDestinations=Box,Confluence,Dropbox,Flickr,Imgur,Jira,Photobucket,Picasa,\n; How many days between every update check? (0=no checks)\n; UpdateCheckInterval=0\n'@\n\nif (-Not (Test-Path \"$ENV:ProgramFiles\\Greenshot\\Greenshot-fixed.ini\")) {\n    New-Item \"$ENV:ProgramFiles\\Greenshot\\Greenshot-fixed.ini\"\n    Set-Content \"$ENV:ProgramFiles\\Greenshot\\Greenshot-fixed.ini\" $fixedsettings\n}\n\n\n#here is the method I've been using to get around the forced browser poppup.\n#stop deploy user browser instances and greenshot\nGet-Process iexplore -IncludeUserName -ErrorAction SilentlyContinue | Where-Object UserName -match $env:username | Stop-Process -ErrorAction SilentlyContinue\nGet-Process chrome -IncludeUserName -ErrorAction SilentlyContinue | Where-Object UserName -match $env:username | Stop-Process -ErrorAction SilentlyContinue\nGet-Process msedge -IncludeUserName -ErrorAction SilentlyContinue | Where-Object UserName -match $env:username | Stop-Process -ErrorAction SilentlyContinue\nGet-Process greenshot -IncludeUserName -ErrorAction SilentlyContinue | Where-Object UserName -match $env:username | Stop-Process -ErrorAction SilentlyContinue\n\n\n#start greenshot as logged on user\n#temporarily download psexec to temp location.\n#run greenshot via the console session (vdi might require another solution)\nif (Test-Path \"$ENV:ProgramFiles\\Greenshot\\Greenshot.exe\") {\n    $source = 'https://live.sysinternals.com/PsExec.exe'\n    $destination = 'C:\\temp\\PsExec.exe'\n    Invoke-WebRequest -Uri $source -OutFile $destination\n    .\\PsExec.exe -accepteula -i -d \"$ENV:ProgramFiles\\Greenshot\\greenshot.exe\"\n    Remove-Item C:\\temp\\PsExec.exe -Confirm:$false\n} else {}\n\n\n#cleaup\nif (Test-Path \"C:\\temp\\custom.inf\") {\n    Remove-Item \"C:\\temp\\custom.inf\" -Confirm:$false\n}\n\nStop-Transcript\n</code></pre>"},{"location":"2023/11/10/poor-mans-connection-monitoring/","title":"Poor Mans Connection Monitoring","text":"<p>This morning I had need to be alerted if I ping starts failing in an ad-hoc situation. The below script does a test ping and then beeps if the ping fails. It'll loop endlessly.</p> <pre><code>while ($true) {\n    $ping = Test-Connection -ComputerName 10.120.10.100 -Count 1\n    $ping\n    Start-Sleep -Seconds 1\n    If (($ping -eq \"\") -or ($ping -eq $null)) {\n        [console]::beep(500,1000)\n    }\n}\n</code></pre>"},{"location":"archive/2023/","title":"2023","text":""},{"location":"category/powershell/","title":"Powershell","text":""},{"location":"category/scripting/","title":"Scripting","text":""},{"location":"category/intune/","title":"Intune","text":""},{"location":"category/linux/","title":"Linux","text":""},{"location":"category/monitoring/","title":"Monitoring","text":""},{"location":"category/windows/","title":"Windows","text":""},{"location":"category/server/","title":"Server","text":""},{"location":"category/dns/","title":"DNS","text":""},{"location":"category/active-directory/","title":"Active Directory","text":""},{"location":"category/ntp/","title":"ntp","text":""},{"location":"category/aws/","title":"aws","text":""}]}